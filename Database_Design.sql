-- Name: Farouk Sedick
-- ID: 10947554
-- Programming Logic (triggers and functions) starts at line 94
-- Implementation of the logic behind the operation of the database starts at line 389

---------------------- DB OF AIRPORT SHELL FILLING STATION ----------------------------

-- This table stores the details of customers 
CREATE TABLE IF NOT EXISTS customers(
	cust_id BIGSERIAL Primary key,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	phone_no BIGINT UNIQUE NOT NULL,
	email VARCHAR(100) UNIQUE,
	loyalty_pts DECIMAL(10,2) default 0
);


-- This table stores the vehicle details of customers
CREATE TABLE IF NOT EXISTS customer_vehicles(
	vehicle_id BIGSERIAL Primary key,
	vehicle_owner INT REFERENCES customers(cust_id),
	vehicle_type VARCHAR(50) NOT NULL,
	vehicle_no_plate VARCHAR(20) NOT NULL,
	make VARCHAR(30) NOT NULL,
	model VARCHAR(30) NOT NULL
);


-- This table stores the information of employees in the filling station
CREATE TABLE IF NOT EXISTS employees(
	employee_id BIGSERIAL Primary key,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	gender VARCHAR(20) NOT NULL,
	phone_no BIGINT UNIQUE NOT NULL,
	work_position VARCHAR(50) NOT NULL,
	email VARCHAR(50) UNIQUE,
	address TEXT,
	revenue_generated DECIMAL(10,2) default 0
);


-- This table stores the information of the filling station's products suppliers
CREATE TABLE IF NOT EXISTS suppliers(
	supplier_id SERIAL primary key,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	gender VARCHAR(10),
	email VARCHAR(100) UNIQUE,
	phone_no BIGINT UNIQUE NOT NULL,
	supplier_of VARCHAR(30) NOT NULL,
	address TEXT
);


-- This table stores information about the details of products sold at the filling station 
CREATE TABLE IF NOT EXISTS products(
	prod_id BIGSERIAL Primary key,
	prod_name VARCHAR(100) NOT NULL,
	quantity BIGINT NOT NULL,
	price DECIMAL(10,2) NOT NULL,
	supplier_id BIGINT REFERENCES suppliers(supplier_id),
	description TEXT,
	total_sales DECIMAL(10,2) default 0
);


-- This table initiates and tracks orders made by customers 
CREATE TABLE IF NOT EXISTS orders(
	order_id BIGSERIAL primary key,
	customer_id BIGINT REFERENCES customers(cust_id),
	emp_id INT REFERENCES employees(employee_id),
	order_date DATE NOT NULL DEFAULT CURRENT_DATE,
	total_amt DECIMAL(10,2) default 0
);


-- This table tracks ordered items by customers
CREATE TABLE IF NOT EXISTS order_items(
	order_items_id BIGSERIAL Primary key,
	order_id INT REFERENCES orders(order_id),
	product_id BIGINT REFERENCES products(prod_id),
	quantity INT NOT NULL,
	price DECIMAL(10,2) NOT NULL
);

SELECT * FROM products;


------------------ TRIGGERS AND TRIGGER FUNCTIONS -------------------

-- This trigger function calculates and stores the total amount for an order 
CREATE OR REPLACE FUNCTION update_order_total()
RETURNS TRIGGER AS
$$
BEGIN
	UPDATE orders SET total_amt = (SELECT SUM(price * quantity) FROM order_items WHERE order_id = NEW.order_id);
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER update_order_total_trigger
AFTER INSERT OR UPDATE OR DELETE ON order_items
FOR EACH ROW 
EXECUTE PROCEDURE update_order_total();


-- This trigger function updates the loyalty points of customers whenever they complete an order 
-- NB; The loyalty points can be used to provide discounts or other promotions to top customers
CREATE OR REPLACE FUNCTION update_loyalty_pts()
RETURNS TRIGGER AS
$$
BEGIN
	UPDATE customers SET loyalty_pts = loyalty_pts + NEW.total_amt WHERE cust_id = NEW.customer_id;
	RETURN NEW;
END;
$$ 
LANGUAGE plpgsql;

CREATE TRIGGER update_loyalty_pts_trigger
AFTER INSERT OR UPDATE ON orders
FOR EACH ROW 
EXECUTE PROCEDURE update_loyalty_pts();


-- This trigger function updates the remaining quantity of a particular product whenever
-- the product item is ordered
CREATE OR REPLACE FUNCTION update_product_quantity()
RETURNS TRIGGER AS
$$
BEGIN
	UPDATE products SET quantity = quantity - NEW.quantity WHERE prod_id = NEW.product_id;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER update_product_quantity_trigger
AFTER INSERT ON order_items
FOR EACH ROW 
EXECUTE PROCEDURE update_product_quantity();


-- Calculates total revenue generated by a salesperson
CREATE OR REPLACE FUNCTION update_revenue_generated_by_salesperson()
RETURNS TRIGGER AS
$$
BEGIN 
	UPDATE employees SET revenue_generated = NEW.total_amt WHERE employee_id = NEW.emp_id;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER update_revenue_generated_by_salesperson_trig
AFTER INSERT OR UPDATE ON orders
FOR EACH ROW 
EXECUTE PROCEDURE update_revenue_generated_by_salesperson();


-- Updates total sales of products
CREATE OR REPLACE FUNCTION update_prod_total_sales()
RETURNS TRIGGER AS 
$$
BEGIN
	UPDATE products SET total_sales = (NEW.quantity * NEW.price) WHERE prod_id = NEW.product_id;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER update_prod_total_sales_trig
AFTER INSERT OR UPDATE ON order_items
FOR EACH ROW 
EXECUTE PROCEDURE update_prod_total_sales();





---------------------- FUNCTIONS -----------------------

-- Retrieves the top 10 customers of the filling station
CREATE OR REPLACE FUNCTION top_10_customers()
RETURNS TABLE (Customer_id BIGINT, full_name TEXT, total_spent DECIMAL(10,2)) AS 
$$
BEGIN
	RETURN QUERY
	SELECT cust_id, first_name || ' ' || last_name, loyalty_pts AS total_spent
	FROM customers ORDER BY total_spent DESC
	LIMIT 5;
END;
$$
LANGUAGE plpgsql;


-- Retrieves products with the most sales
CREATE OR REPLACE FUNCTION top_selling_products(first_x_products INT)
RETURNS TABLE (productId BIGINT, productName VARCHAR(100), sales DECIMAL(10,2)) AS
$$
BEGIN
	RETURN QUERY
	SELECT prod_id, prod_name, total_sales
	FROM products ORDER BY total_sales DESC
	LIMIT $1;
END;
$$
LANGUAGE plpgsql;


-- Calculates and returns the total cost of an order
CREATE OR REPLACE FUNCTION calculate_order_cost(order_id INT)
RETURNS DECIMAL(10,2) AS
$$
DECLARE
	total_cost DECIMAL(10,2);
BEGIN 
	SELECT SUM(prod.price * ord_items.quantity) INTO total_cost
	FROM order_items ord_items
	JOIN products prod ON prod.prod_id = ord_items.product_id
	WHERE ord_items.order_id = $1;
	RETURN total_cost;
END;
$$
LANGUAGE plpgsql;


-- Retrieves total revenue of sales made by an employee
CREATE OR REPLACE FUNCTION employee_sales(emp_id INT)
RETURNS DECIMAL(10,2) AS 
$$
BEGIN
	RETURN (SELECT revenue_generated FROM employees WHERE employee_id = $1);
END;
$$
LANGUAGE plpgsql;


-- Retrives revenue generated for a specific product
CREATE OR REPLACE FUNCTION product_revenue(prod_id BIGINT)
RETURNS DECIMAL(10,2) AS
$$
BEGIN
	RETURN (SELECT SUM(price * quantity) FROM order_items WHERE prod_id = $1);
END;
$$
LANGUAGE plpgsql;


-- Returns the average total amount of all orders
CREATE OR REPLACE FUNCTION avg_order_total()
RETURNS DECIMAL(10,2) AS
$$
BEGIN
	RETURN (SELECT AVG(total_amt) FROM orders);
END;
$$
LANGUAGE plpgsql;


-- Returns the total amount of all orders
CREATE OR REPLACE FUNCTION total_revenue()
RETURNS DECIMAL(10,2) AS
$$
BEGIN
	RETURN (SELECT SUM(price * quantity) FROM order_items);
END;
$$
LANGUAGE plpgsql;


-- Retrieves history of customer's orders
CREATE OR REPLACE FUNCTION customer_order_history(cust_id BIGINT)
RETURNS TABLE (ordered_id BIGINT, amt_paid DECIMAL(10,2), ordered_date DATE) AS
$$
BEGIN
   RETURN QUERY
   SELECT order_id, total_amt, order_date
   FROM orders WHERE cust_id = $1;
END;
$$
LANGUAGE plpgsql;




-------------------------- INSERTION OF TEST DATA -----------------------------

INSERT INTO customers(first_name, last_name, phone_no, email)
VALUES ('Farouk', 'Sedick', 0596321362, 'sadikalhanssah@gmail.com'),
('Umar', 'Alhassan', 0508143050, 'fusedick@st.ug.edu.gh'),
('George', 'Ekow', 0244589044, 'georg@yahoo.com'),
('Haaris', 'Waqas', 0248590285, 'harr@gmail.com'),
('Jean', 'Nelson', 0558947577, 'jeanel@yahoo.com'),
('Alexander', 'Sey', 0548695785, 'alesey@st.ug.edu.gh'),
('Hilla', 'Limann', 0244458101, 'hilan@gmail.com'),
('Bevelyn', 'Osei', 0244234101, 'bevos@gmail.com'),
('Samuel', 'Asiamah', 0596879310, 'samah@yahoo.com'),
('Mustapha', 'Saani', 0249058101, 'musaani@gmail.com'),
('Lionel', 'Messi', 0244477661, 'leo@gmail.com'),
('Mariam', 'Sedick', 0240918101, 'marsed@gmail.com'),
('David', 'Korankye', 0594758101, 'davkor@gmail.com'),
('Margaret', 'Thatcher', 0598958101, 'marthat@gmail.com'),
('Robert', 'Sowah', 0242451193, 'robso@gmail.com'),
('Kwame', 'Nkrumah', 0556733901, 'kwankru@gmail.com'),
('Nicole', 'Brown', 0244466112, 'nicobr@gmail.com'),
('Freda', 'Acquah', 0555670101, 'freacq@gmail.com'),
('Osman', 'Hasheem', 0554433309, 'osham@yaho.com'),
('Kenneth', 'Broni', 0506978390, 'kenbro@gmail.com');

SELECT * FROM customers;

INSERT INTO customer_vehicles (vehicle_owner, vehicle_type, vehicle_no_plate, make, model) 
VALUES (1, 'sedan', 'ABC123', 'Toyota', 'Camry'),
(1, 'SUV', 'DEF456', 'Honda', 'CR-V'),
(2, 'pickup truck', 'GHI789', 'Ford', 'F-150'),
(3, 'sedan', 'JKL012', 'Nissan', 'Altima'),
(3, 'SUV', 'MNO345', 'Chevrolet', 'Equinox'),
(4, 'sedan', 'PQR678', 'Honda', 'Accord'),
(4, 'pickup truck', 'STU901', 'Toyota', 'Tundra'),
(5, 'sedan', 'VWX234', 'Ford', 'Mustang'),
(6, 'SUV', 'YZA567', 'Jeep', 'Grand Cherokee'),
(7, 'sedan', 'BCD890', 'Toyota', 'Corolla'),
(15, 'pickup truck', 'EFG123', 'GMC', 'Sierra'),
(6, 'sedan', 'HIJ456', 'Hyundai', 'Elantra'),
(7, 'SUV', 'KLM789', 'Subaru', 'Forester'),
(8, 'sedan', 'NOP012', 'Volkswagen', 'Jetta'),
(12, 'pickup truck', 'QRS345', 'Ram', '1500'),
(11, 'sedan', 'TUV678', 'Ford', 'Focus'),
(17, 'SUV', 'WXY901', 'Jeep', 'Wrangler'),
(13, 'sedan', 'ZAB234', 'Chevrolet', 'Malibu'),
(20, 'sports car', 'GHB234', 'Bugatti', 'Veyron');

SELECT * FROM customer_vehicles;

INSERT INTO employees (first_name, last_name, gender, phone_no, work_position, email, address) 
VALUES ('John', 'Doe', 'Male', 1234567890, 'Manager', 'john.doe@gmail.com', 'East Legon, Accra'),
('Jane', 'Smith', 'Female', 2345678901, 'Assistant Manager', 'jane.smith@gmail.com', 'Teshie, Accra'),
('Bob', 'Johnson', 'Male', 3456789012, 'Salesperson', 'bob.johnson@gmail.com', 'Burma Camp, Accra'),
('Samantha', 'More', 'Female', 4567890123, 'Salesperson', 'samantha.lee@gmail.com', 'Airport Residential Area, Accra'),
('Mike', 'Grant', 'Male', 5678901234, 'Salesperson', 'mikegrn@gmail.com', 'West Legon, Accra'),
('Tina', 'Marfo', 'Female', 6789012345, 'Salesperson', 'tinamar@gmail.com', 'North Legon, Accra'),
('David', 'Baffour', 'Male', 7890123456, 'Cleaner', 'david.kim@gmail.com', 'Osu, Accra'),
('Linda', 'Kaufmann', 'Female', 8901234567, 'Cleaner', 'linda.garcia@gmail.com', 'Makola, Accra'),
('Chris', 'Jones', 'Male', 9012345678, 'Salesperson', 'chris.jones@gmail.com', 'Ashongman Estates, Accra'),
('Jenna', 'Ankomah', 'Female', 4321567890, 'Salesperson', 'jennaank@yahoo.com', 'Cantonments, Accra'),
('Matt', 'Davis', 'Male', 5000678901, 'Salesperson', 'matt.davis@yahoo.com', 'Nungua, Accra'),
('Sara', 'Wilson', 'Female', 3456789912, 'Salesperson', 'sara.wilson@yahoo.com', 'East Legon, Accra'),
('Kwasi', 'Darbo', 'Male', 3458789012, 'Security personnel', 'Kwasi.darbo@yahoo.com', 'North Legon, Accra'),
('Kwame', 'Twum', 'Male', 3456339012, 'Security personnel', 'kwatw@yahoo.com', 'Makola, Accra');

SELECT * FROM employees;

INSERT INTO suppliers (first_name, last_name, gender, phone_no, supplier_of, email, address) 
VALUES ('Dave', 'Doe', 'Male', 3214567890, 'Petrol', 'davdoe@gmail.com', 'East Legon, Accra'),
('John', 'Smith', 'Male', 4325678901, 'Diesel', 'jonsm@gmail.com', 'Teshie, Accra'),
('Bob', 'Marley', 'Male', 3456789012, 'Lubricants', 'bobmar@gmail.com', 'Burma Camp, Accra'),
('Augustina', 'More', 'Female', 6547890123, 'Supermarket Drinks', 'aumore@gmail.com', 'Airport Residential Area, Accra'),
('Alex', 'Grant', 'Male', 7658901234, 'Supermarket Toiletries', 'alexgr@gmail.com', 'West Legon, Accra'),
('Kobby', 'Marfo', 'Male', 8769012345, 'Supermarket Foodstuffs', 'kobmar@gmail.com', 'North Legon, Accra');

SELECT * FROM suppliers;

INSERT INTO products(prod_name, quantity, price, supplier_id, description)
VALUES ('Petrol', 16000, 10.59, 1, 'Petrol sold at 10.59 cedis per litre.'),
('Diesel', 20000, 12.69, 2, 'Diesel sold at 12.69 cedis per litre.'),
('Shell SUV oil', 20, 150, 3, 'Shell SUV cars oil sold at 150 cedis per gallon.'),
('Shell Truck oil', 30, 200, 3, 'Shell Trucks oil sold at 200 cedis per gallon.'),
('Shell Sedan oil', 25, 100, 3, 'Shell Sedan cars oil sold at 100 cedis per gallon.'),
('Champaigne', 200, 70, 4, 'Champaigne drinks sold at 70 cedis per bottle.'),
('Don Simon', 300, 20, 4, 'Don Simon drinks sold at 20 cedis per carton.'),
('Coca-Cola', 250, 4, 4, 'Champaigne drinks sold at 4 cedis per bottle.'),
('Welch Citrus Fruits', 200, 20, 4, 'Welch Citrus flavored drinks sold at 20 cedis per bottle.'),
('Sunny Roll', 50, 10, 5, 'Sunny Roll toilet rolls sold at 10 per single.'),
('Pepsodent paste', 100, 10, 5, 'Pepsodent paste sold at 10 per single.'),
('Geisha soap', 80, 7, 5, 'Geisha soaps sold at 7 per single.'),
('Michi chips', 100, 15, 6, 'Plantain flavored chips sold at 15 per single.'),
('Gino paste', 100, 5, 6, 'Canned tomato pastes sold at 5 per can.'),
('Neat Fufu', 100, 30, 6, 'Powdered cassava dough sold at 30 per box.');




----------------------- IMPLEMENTATION OF LOGIC --------------------------

INSERT INTO orders(customer_id, emp_id) VALUES(1,3); -- Initiates an order
SELECT * FROM orders;        -- Order succesfully initiated
INSERT INTO order_items(order_id, product_id, quantity, price)
VALUES (1, 1, 10, 10.59), (1, 7, 2, 20);    -- Customer with id 1 buys 10 litres of petrol at 10.59 per litre 
										    -- and 2 cartons of Don Simon at 20 cedis per carton

-- TRIGGER EFFECTS OF ABOVE INSERTIONS
SELECT * FROM order_items; -- ordered items by customer with id 1 tracked
SELECT * FROM orders; -- Total_amt calculates and stores total cost of ordered items
SELECT * FROM customers; -- Loyalty_pts of customer increases according to amount spent when customer places an order
SELECT * FROM products; -- Quantity of both petrol and Don Simon decrease by the quantity ordered. Also, total sales of both is recorded

-- FUNCTIONS
SELECT top_10_customers(); -- Returns top 5 highest spenders
SELECT top_selling_products(3); -- Returns top 'x' selling products where 'x' is the top number wanted
SELECT customer_order_history(1); -- Returns a table holding the order history of customer with cust_id 1
SELECT avg_order_total(); -- Returns average total amount of orders, in this case, 145.9 cedis
SELECT calculate_order_cost(1); -- Calculates order cost without viewing orders table
SELECT employee_sales(3); -- Returns total amount of sales made by employee with ID 1.
SELECT product_revenue(1); -- Returns total revenue for a particular product
SELECT total_revenue(); -- Returns total revenue of the filling station
